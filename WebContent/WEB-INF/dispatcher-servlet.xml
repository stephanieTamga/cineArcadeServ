<!-- espace de nom par defaut est utilisé sans préfixe -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/jee
http://www.springframework.org/schema/jee/spring-jee.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- on demande à spring de faire un scan pour voir la classe controller 
		qui est un bean défini en annotation et non en xml coe le bean dao, sinon 
		il ne le trouvera pas -->
	<context:component-scan base-package="fr.demos.controller" />
	<mvc:annotation-driven />
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />

	<!-- pour que Spring traite les annotations on peut aussi utiliser <context:annotation-config/> 
		(A VERIFIER) qui engendre d'autres processeurs -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Spring s'adresse au conteneur JPA de Glassfish. Le fichier persistence.xml 
		situé dans META-INF du classpath est utilisé -->
	<jee:jndi-lookup id="entityManagerFactory" jndi-name="persistence/cineArcadeJNDI" />

	<!-- Pour que spring sache géréer les transactions, les transactions seront 
		gérées par JTA, implémenté dans Glassfish -->
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
	</bean>
	<bean id="dao" class="fr.demos.dao.jpa.ClientDaoJpa"></bean>
	<bean id="daolivre" class="fr.demos.dao.jpa.ProduitDaoJpa"></bean>
	

	<!-- on pourra utiliser l'annotation @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>